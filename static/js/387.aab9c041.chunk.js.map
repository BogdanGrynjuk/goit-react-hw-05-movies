{"version":3,"file":"static/js/387.aab9c041.chunk.js","mappings":"+RAEaA,EAAWC,EAAAA,GAAAA,GAAH,qDAKRC,EAAUD,EAAAA,GAAAA,GAAH,uGAQPE,EAAaF,EAAAA,GAAAA,IAAH,yCAGVG,EAAOH,EAAAA,GAAAA,EAAH,gFAMJI,EAAYJ,EAAAA,GAAAA,EAAH,4D,SC4BtB,EAxCa,WACX,OAAwBK,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACMC,GAASC,EAAAA,EAAAA,MAcf,OAZAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,WAA4BC,GAA5B,gGAE0BC,EAAAA,EAAAA,kBAAsBD,GAFhD,OAEUE,EAFV,OAGIN,EAAQM,EAAQP,MAHpB,gDAKIQ,QAAQC,MAAR,MALJ,kEADc,uBAAC,SAAD,2BASdC,CAAaR,EAAOS,QACrB,GAAE,CAACT,EAAOS,WAGT,8BACGX,EAAKY,OAAS,GACX,SAACnB,EAAD,UACCO,EAAKa,KAAI,YAAiD,IAA9CC,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UACxC,OACE,UAACtB,EAAD,YACE,SAACC,EAAD,CAAYsB,IAAKF,EAAY,yCACSA,GAClC,sCACFG,IAAKJ,KAEP,SAAClB,EAAD,UAAOkB,KACP,UAACjB,EAAD,yBAAuBmB,OAPXH,EAUjB,OAED,SAACM,EAAA,QAAD,kDAIT,C,kFChDYC,E,OAAU3B,GAAAA,IAAH,6H,SCSpB,EARqB,SAAC,GAAkB,IAAhB4B,EAAe,EAAfA,SACtB,OACE,SAACD,EAAD,UACGC,GAGN,C,6DCPKC,EAAU,mCAChBC,EAAAA,GAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAkB,mCAAG,+GAEAD,EAAAA,GAAAA,IAAA,mCAAsCD,IAFtC,cAEjBG,EAFiB,OAGjBC,EAASD,EAASE,KAHD,kBAIhBD,GAJgB,gCAMvBnB,QAAQC,MAAR,MANuB,yDAAH,qDAUlBoB,EAAkB,mCAAG,WAAOxB,GAAP,kGAEAmB,EAAAA,GAAAA,IAAA,gBAAmBnB,EAAnB,oBAAiCkB,EAAjC,oBAFA,cAEjBG,EAFiB,OAGjBI,EAAQJ,EAASE,KAHA,kBAIhBE,GAJgB,gCAMvBtB,QAAQC,MAAR,MANuB,yDAAH,sDAUlBsB,EAAiB,mCAAG,WAAO1B,GAAP,kGAECmB,EAAAA,GAAAA,IAAA,gBAAmBnB,EAAnB,4BAAyCkB,EAAzC,oBAFD,cAEhBG,EAFgB,OAGhBnB,EAAUmB,EAASE,KAHH,kBAIfrB,GAJe,gCAMtBC,QAAQC,MAAR,MANsB,yDAAH,sDAUjBuB,EAAiB,mCAAG,WAAO3B,GAAP,kGAECmB,EAAAA,GAAAA,IAAA,gBAAmBnB,EAAnB,4BAAyCkB,EAAzC,2BAFD,cAEhBG,EAFgB,OAGhBO,EAAUP,EAASE,KAHH,kBAIfK,GAJe,gCAMtBzB,QAAQC,MAAR,MANsB,yDAAH,sDAUjByB,EAAW,mCAAG,WAAOC,GAAP,kGAEOX,EAAAA,GAAAA,IAAA,+BAAkCD,EAAlC,iCAAkEY,EAAlE,gCAFP,cAEVT,EAFU,OAGVC,EAASD,EAASE,KAHR,kBAITD,GAJS,gCAMhBnB,QAAQC,MAAR,MANgB,yDAAH,sDAUXH,EAAM,CACVmB,mBAAAA,EACAI,mBAAAA,EACAE,kBAAAA,EACAC,kBAAAA,EACAE,YAAAA,GAGF,K","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/Notification/Notification.styled.js","components/Notification/Notification.jsx","services/api.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Profiles = styled.ul`\n  margin: 0;\n  padding: 0;\n`;\n\nexport const Profile = styled.li`\n  list-style: none;\n\n  &:not(:last-child) {\n    margin-bottom: 20px;\n  };\n`;\n\nexport const PhotoActor = styled.img`\n  width: 200px;\n`;\nexport const Name = styled.p`\n  margin: 0;\n  font-weight: bold;\n  font-size: 20px;\n`;\n\nexport const Character = styled.p`\n  margin: 0;  \n  font-size: 16px;\n`;","import { useState, useEffect } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport Notification from 'components/Notification/Notification';\nimport api from 'services/api';\nimport {\n  Profiles,\n  Profile,\n  PhotoActor,\n  Name,\n  Character\n} from './Cast.styled';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const params = useParams();\n\n  useEffect(() => {\n    async function fetchCredits(id) {\n      try {\n        const credits = await api.fetchMovieCredits(id);\n        setCast(credits.cast);\n      } catch (error) {\n        console.error(error);\n      };\n    };\n    fetchCredits(params.movieId);\n  }, [params.movieId]);\n    \n  return (\n    <>\n      {cast.length > 0\n        ? <Profiles>\n          {cast.map(({ cast_id, name, profile_path, character }) => {\n            return (\n              <Profile key={cast_id}>\n                <PhotoActor src={profile_path\n                  ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                  : 'https://via.placeholder.com/200x300'}\n                  alt={name}\n                />\n                <Name>{name}</Name>\n                <Character>Character: {character}</Character>\n              </Profile>\n            );\n          })}\n        </Profiles>\n        : <Notification>We don't have cast for this movie.</Notification>\n      }\n    </>\n  );\n};\n\nexport default Cast;","import styled from \"styled-components\";\n\nexport const Message = styled.div`\n  margin-top: 20px;\n  text-align: center;\n  font-size: 24px;\n  font-weight: bold;\n  color: red;\n`;","import PropTypes from 'prop-types';\nimport { Message } from './Notification.styled';\n\nconst Notification = ({ children }) => {\n  return (\n    <Message>\n      {children}\n    </Message>\n  );\n};\n\nexport default Notification;\n\nNotification.propTypes = {\n  children: PropTypes.node.isRequired\n}","import axios from 'axios';\n\nconst API_KEY = \"b39cd0aa2d0aa8fddb8a89d5bb3e6717\";\naxios.defaults.baseURL = \"https://api.themoviedb.org/3/\";\n\nconst fetchMoviesInTrend = async () => {\n  try {\n    const response = await axios.get(`trending/all/day?api_key=${API_KEY}`);\n    const movies = response.data;\n    return movies;\n  } catch (error) {\n    console.error(error);\n  }    \n};\n\nconst fetchMoviesDetails = async (id) => {\n  try {\n    const response = await axios.get(`movie/${id}?api_key=${API_KEY}&language=en-US`);\n    const movie = response.data;\n    return movie;    \n  } catch (error) {\n    console.error(error);\n  }    \n};\n\nconst fetchMovieCredits = async (id) => {\n  try {\n    const response = await axios.get(`movie/${id}/credits?api_key=${API_KEY}&language=en-US`);\n    const credits = response.data;\n    return credits;    \n  } catch (error) {\n    console.error(error);\n  }    \n};\n\nconst fetchMovieReviews = async (id) => {\n  try {\n    const response = await axios.get(`movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\n    const reviews = response.data;\n    return reviews;    \n  } catch (error) {\n    console.error(error);\n  }    \n};\n\nconst fetchMovies = async (searchQuery) => {\n  try {\n    const response = await axios.get(`search/movie?api_key=${API_KEY}&language=en-US&query=${searchQuery}&page=1&include_adult=false`);\n    const movies = response.data;\n    return movies;    \n  } catch (error) {\n    console.error(error);\n  }    \n};\n\nconst api = {\n  fetchMoviesInTrend,\n  fetchMoviesDetails,\n  fetchMovieCredits,\n  fetchMovieReviews,\n  fetchMovies\n};\n\nexport default api;"],"names":["Profiles","styled","Profile","PhotoActor","Name","Character","useState","cast","setCast","params","useParams","useEffect","id","api","credits","console","error","fetchCredits","movieId","length","map","cast_id","name","profile_path","character","src","alt","Notification","Message","children","API_KEY","axios","fetchMoviesInTrend","response","movies","data","fetchMoviesDetails","movie","fetchMovieCredits","fetchMovieReviews","reviews","fetchMovies","searchQuery"],"sourceRoot":""}